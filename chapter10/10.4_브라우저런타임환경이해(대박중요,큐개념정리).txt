자바스크립트 런타임 환경에서 자바스크립트만으로는 할 수 있는것이 한정된다.
하지만 Web APIs가 있어서 할 수 있는것이 많다.
Web APIs는 브라우저에서 제공하는 API이기 때문에 브라우저의 Multi Threading을 이용해서 다양한 일을 동시에 실행할 수 있다.
예를 들어 fetch를 이용해서 백엔드에서 데이터를 받아오거나, setTimeout을 이용해 일정 시간이 지난 후 우리가 등록한 콜백함수를 실행하는 등
멋진 일들을 할 수 있다.

여기서 이런 궁금증이 생길 수 있다.
"엘리가 자바스크립트에는 콜스택이 있는데, 콜스택에는 순서대로 함수들이 실행하는 것을 담고 있다고 했잖아요.
그러면 Web APIs를 통해 등록한 콜백함수는 어떻게 동작하나요? 어떻게 자바스크립트 엔진과 Web APIs가 동작하는 건가요?"

이번시간에 Web APIs와 자바스크립트 엔진이 어떤식으로 대화하고 어떤식으로 협력하며 일을 수행하는지 알아본다.

Web APIs
- DOM API
- setTimeout
- setInterval
- fetch
- event listener

예로 setTimeout을 들어보자.

| setTimeout() |
| second()     |
| first()      |
| main()       |
 ______________

Call Stack (콜 스택)

second 함수 안에서 setTimeout을 호출했다.
setTimeout에 3초 후 콘솔에 hello를 호출하는 콜백함수를 등록했다.
setTimeout을 호출하는 순간 콜 스택에서 setTimeout은 제거되고 Web API는 타이머를 실행한다.
타이머가 실행되는 와중에도, 즉 타이머와 자바스크립트 엔진은 병렬적으로 실행되고 있다가 지정된 시간이 되면
Web APIs는 Task Queue에 timeout callback을 집어넣는다.

Queue?
FIFO (First In First Out) 처음에 들어온 애가 제일 처음에 나간다.
큐의 대표적인 api에는 add()와 remove()가 있다.

add(1)
_____________
| 1
_____________


add(2)
_____________
| 1 2
_____________


remove()
_____________
| 2
_____________


그러면 Task Queue에 들어있는 콜백함수(timeout callback)은 언제 실행되는걸까?
Call Stack과 Task Queue를 관찰하는 애가 있다.
그건 바로 Event Loop다.
이벤트 루프는 while이나 for문처럼 루프를 빙글빙글 계속 돌면서 Call Stack과 Task Queue를 관찰한다.
이벤트 루프는 빙글빙글 돌며 콜 스택에 일이 남아있으면 콜 스택이 비워질 때까지 기다린다.

콜 스택에 남아있는 second, first 함수가 끝나고 main 함수가 끝나면 콜 스택이 비워져서 자바스크립트 엔진이 더이상 일을 하고 있지 않을 때
이벤트 루프는 태스크 큐에 있는 함수(timeout callback)를 콜 스택으로 이동시킨다.
그러면 자바스크립트 엔진은 콜 스택에 있는 timeout callback을 실행시킨다.

이벤트 루프는 프로세스가 동작하는 동안 빙글빙글 루프를 돌면서
콜 스택이 비워져 있다면 태스크 큐에 있는 애를 콜 스택으로 가져와서 자바스크립트 엔진이 수행할 수 있도록 도와준다.

태스크 큐에 있는 애를 한번에 하나만 콜 스택으로 이동시킬 수 있다.









