프로세스란 컴퓨터(운영체제) 위에서 연속적으로 실행되고 있는 프로그램
음악 재생 프로그램, 사진 뷰어 등 이런 프로그램은 각각의 프로세스를 가지고 있다.
각 프로세스는 메모리 위에서 독립적으로 실행되고 있다.
a라는 프로그램(프로세스)에 문제가 생기면 a 프로세스만 강제종료할 수 있거나 종료된다.

그래서 프로세스는 운영체제 위에서 독립적으로 메모리에서 실행되고 있는 프로그램을 말한다.
프로세스마다 자원이 지정되어 있다.

프로세스 안에는 Code, Stack, Heap, Data
Code: 프로그램을 위해 작성된, 프로그램을 실행하기 위해 작성된 코드가 들어있다.
Stack: 코드들이 어떤 순서로 실행되어야 하는지, 이 함수가 끝나면 어디로 다시 돌아가야 하는지에 대한 정보를 저장하고 있다.
Heap: 오브젝트를 생성하거나 데이터를 만들 때 데이터들이 저장되는 공간이다. 동적으로 할당된 데이터가 저장된다.
Data: 전역변수나 static 변수가 저장된다.

각 프로세스는 자기들에게 필요한 Code, 동작하는 순서를 기억하는 Stack, 데이터들이 들어 있는 Heap과 Data를 가진다.

그렇다면 Thread 쓰레드는 무엇일까?
한 프로세스 안에서 쓰레드가 여러개 동작할 수 있다.
쓰레드는 저마다 해야할 업무를 배정받는다. 그래서 일꾼이라고 부른다.
쓰레드는 수행해야 하는 함수의 호출을 기억해야하기 때문에 쓰레드마다 Stack을 가지고 있다.

하지만 프로세스 안에서 동작하는 일꾼들은 한 프로그램을 위해서 일해야 하므로
프로세스에 지정된 Code, Heap, Data에 공통적으로 접근해서 공통적으로 업데이트할 수 있다.

내 프로그램에서 음악을 들으면서 사진을 편집할 수 있는 어플리케이션이 있다면
음악을 재생할 수 있는 쓰레드와 사진을 편집할 수 있는 쓰레드, 그리고 다른 쓰레드에서는 음악을 다른 서버에서부터 받아와서 처리하는
이런 일들을 각각 저마다 할 수 있다.

쓰레드는 동시다발적으로 발생할 수 있기 때문에 프로세스가 좀 더 효율적으로 일할 수 있게 돕는다.

만약 프로세스가 하나의 일밖에 하지 못한다면 음악을 듣는 동안 사진 편집을 할 수 없겠지?
이렇게 쓰레드가 들어있기 때문에 동시에 다양한 일을 할 수 있다.

여기서 포인트는
쓰레드는 자신들이 일을 수행할 때 어디에서부터 어디까지 일을 했고, 어디로 가야하는지 이런 일의 흐름을 기억할 수 있는 고유의 Stack이 지정되어 있지만,
Code, Heap, Data 이런 리소스는 프로세스에 있기 때문에
쓰레드는 공통적으로 이 리소스에 동시다발적으로 접속해서 동시다발적으로 업데이트 해야한다. 서로 리소스를 공유하며 사용한다.

그래서 멀티 쓰레드 프로그래밍이 조금 어려운 이유는
공통적으로 업데이트 하면서 순서가 맞지 않거나 하면 발생할 수 있는 문제가 있기 때문이다.

프로세스는 프로그램이 동작하는 최고의 단위.
쓰레드는 프로그램 안에서 동시에 여러개가 수행될 수 있는 작은 일꾼 단위라고 생각하자.

