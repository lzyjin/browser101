기억해야하는 중요한 포인트는
콜스택에서 수행중인 함수는 끝날 때까지 보장이 된다.
이벤트 루프는 콜스택의 지금 수행중인 함수가 끝날때까지 기다렸다가 그 밑에 있는 함수가 실행되거나 태스크 큐에 있는 함수가 실행된다.
이부분은 나중에 코드를 보며 다시 한번 본다.

이번에는 자바스크립트 런타임 환경의 다른 아이들에 대해 살펴본다.

👉 Render (Render Sequence)
- 우리가 요소들을 움직이거나 애니메이션을 줄때 브라우저는 주기적으로 화면을 업데이트한다.
- Request Animation Frame(큐: callback, callback...) -> Render Tree -> Layout -> Paint
- 우리가 변형한 DOM 요소가 화면에 그려지기 위해서는 Render Tree가 만들어져야하고, Layout을 계산하고 Paint, Composite 과정을 거쳐야 한다.
- Request Animation Frame라는 API를 통해서 콜백함수를 등록해 놓으면 다음에 브라우저가 업데이트되기 전에 내 콜백을 실행해줘. 이런 느낌.
  ->  Request Animation Frame 큐에 콜백함수가 차곡차곡 쌓인다.

👉 Microtask Queue
- 마이크로태스크 큐는 프로미스의 콜백함수(프로미스가 다 실행되고 나면 then으로 등록한 콜백함수), mutation observer에 등록한 콜백 함수가 들어온다.

👉 Task Queue
- Web APIs는 콜백함수로 등록한 함수가 특정 이벤트가 발생했을 때 태스크 큐에 들어간다고 이해했죠.


브라우저는 이 많은 것을 어떻게 동시에 순서대로 수행하는거죠??

이벤트 루프는 while(true) { // do something } 처럼 계속 빙글빙글 도는 녀석이다.
평소에는 빙글빙글 돌다가 콜 스택에 함수가 들어있다면 이 함수가 끝날때까지 기다리며 멈춰있는다.
그래서 만약 콜 스택에 수행중인 함수에서 시간이 오래걸리는 작업을 하면 사용자에게 화면이 더이상 업데이트 되어지지 않는다.
그리고 다른 클릭이 발생해도 클릭에 등록된 콜백함수가 실행되지 않는다. 왜냐하면 이벤트 루프는 콜 스택에 머물러있기 때문!

그렇게 콜 스택에 머물러 있다가 콜 스택에 있는 함수가 끝나면(콜 스택이 비면) 그때서야 이벤트 루프는 다시 빙글빙글 돌기 시작한다.
이벤트 루프는 Render 쪽으로는 갈 수도 안 갈 수도 있다.
무슨 뜻이냐면
(애니메이션은 1초에 60프레임이여야 우리 눈에 자연스럽게 보인다고 한다. 60fps (16.7 ms)
그래서 브라우저도 사용자 눈에 자연스러운 애니메이션을 보여주기 위해 1초당 60개의 프레임을 보여줘야 하는데, 즉 16.7 밀리세컨드 마다 업데이트 해야한다는 말이다.
이벤트 루프는 매우 빠른 속도로 돌고 있기 때문에, 한 바퀴를 도는데 1 ms도 걸리지 않는다. 그래서 매번 1ms마다 Render 업데이트를 할 필요가 없다.
그래서 지정된 시간마다(브라우저마다 다름, 보통 16.7ms 범위) Render 업데이트를 하고, 다른 일을 처리하다가 몇 바퀴 돌고 다시 Render 업데이트 하고 이런 식으로 일을 한다.

Render 를 거치고나서 업데이트를 할게 없으면 Microtask Queue로 넘어간다.
마이크로태스크 큐에 함수들이 있으면 마이크로태스크 큐에 멈춰서 큐에 아무것도 없을 때까지
함수를 하나씩 콜 스택으로 보낸다.
콜 스택에서 하나의 함수가 끝나면 마이크로태스크 큐에서 함수 하나를 또 콜 스택으로 보냄.
그래서 마이크로태스크 큐가 텅텅 빌 때까지 계속 콜 스택으로 가지고 와서 수행함.
콜 스택에서 수행중인 함수가 끝나기 전에 마이크로태스크 큐에 새로운 함수가 들어온다면, 그 새로운 함수도 처리해야해서 이벤트 루프는 여기에 계속 머무른다.

마이크로태스크 큐가 텅 비게 되면 이벤트 루프는 순회를 재개한다.
태스크 큐로 넘어가서 한번에 하나씩만 콜 스택으로 보내고, 콜 스택에서 함수가 끝날 때까지 기다린다.
함수가 끝나면 이벤트 루프는 다시 순회를 시작한다.
브라우저에 화면을 업데이트할 때가 되면 Render 시퀀스에 들어와서
Request Animation Frame을 통해 등록된 콜백함수들을 하나씩 다 실행한 다음에 Render Tree를 만들고, 그 트리를 이용해서 Layout을 계산하고, Paint로 브라우저를 업데이트한다.
그리고 다시 돌기 시작한다.
마이크로태스크 큐에 함수가 없고 태스크 큐에 마지막 남은 함수가 있으면 콜 스택으로 보내고, 콜 스택에서 함수를 실행하게 된다.


